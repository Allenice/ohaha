{"name":"Ohana","tagline":"A simple server that return fake json data for test","body":"ohana\r\n=====\r\n一个返回模拟 json 数据的 http 服务器\r\n特点：\r\n\r\n\r\n - 使用 mockjs 生成 json 数据\r\n - RESTFul\r\n - 可跨域访问\r\n - http 代理转发\r\n\r\n## 安装\r\n\r\n```bash\r\nnpm install ohana\r\n```\r\n\r\n## 使用\r\n\r\n```javascript\r\nvar Server = require(\"ohana\");\r\nvar server = new Server();\r\n\r\nserver.get('/article/', {\r\n\tdelay: 200,\r\n\tdata: function(params, query) {\r\n\t\tconsole.log(params);\r\n\t\tconsole.log(query);\r\n\r\n\t\treturn {\r\n\t\t\t\"status\": \"ok\",\r\n\t\t\t\"total_count\": 100,\r\n\t\t\t\"data|10\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"id|1-10000\": 1,\r\n\t\t\t\t\t\"title\": \"@TITLE(5, 7)\",\r\n\t\t\t\t\t\"author\": \"@NAME\",\r\n\t\t\t\t\t\"post_time\": \"@DATETIME('yyyy-MM-dd HH:mm:ss')\",\r\n\t\t\t\t\t\"read_count|0-1000\": 100\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n});\r\n\r\nserver.start(3000);\r\n\r\n```\r\n## API\r\n\r\n### server.get(path, options)\r\n匹配 GET 方式的请求。\r\n\r\n - path: 路由匹配地址\r\n - options: \r\n\t - delay: 延迟多少毫秒后返回，\r\n\t - data: 返回的数据，可以接受对象和方法, 方法中的参数 params 是路由匹配的参数，query 是提交或查询的参数。\r\n\t \r\n```javascript\r\nserver.get('/article/:id', {\r\n\tdata: function (params, query) {\r\n\t\treturn {\r\n\t\t\t\"status\": \"ok\",\r\n\t\t\t\"data\": {\r\n\t\t\t\t\"id\": params.id,\r\n\t\t\t\t\"title\": \"@TITLE(5, 7)\",\r\n\t\t\t\t\"author\": \"@NAME\",\r\n\t\t\t\t\"post_time\": \"@DATETIME('yyyy-MM-dd HH:mm:ss')\",\r\n\t\t\t\t\"content\": \"@PARAGRAPH(2)\",\r\n\t\t\t\t\"poster\": \"@IMAGE('700x350', '#ccc', '#000', 'hello world')\",\r\n\t\t\t\t\"read_count|0-1000\": 100\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n### server.post(path, options）\r\n与 get 同理\r\n### server.delete(path, options)\r\n与 get 同理\r\n### server.put(path, options)\r\n 与 get 同理\r\n### server.patch(path, options)\r\n与 get 同理\r\n\r\n### server.proxy(path, option)\r\n代理请求\r\n\r\n - path: 路由匹配地址\r\n - options: \r\n\t - urlRoot:  目标服务器请求根目录，\r\n\t - method:  请求类型，GET | POST | PUT | PATCH | DELETE\r\n\t \r\n\r\n\t \r\n```javascript\r\nserver.proxy('/article/:id', {\r\n\turlRoot: 'http://localhost:3000',\r\n\tmethod: DELETE\r\n});\r\n\r\n// 可以设置全局默认配置\r\nserver.setProxyDefault({\r\n  urlRoot: 'http://localhost:3000',\r\n  method: 'GET'\r\n});\r\n\r\n// 之后可以省略配置\r\nserver.proxy('/article/');\r\n\r\nserver.proxy('/article/:id');\r\n\r\nserver.proxy('/article/', {\r\n  method: 'POST'\r\n});\r\n\r\nserver.proxy('/article/:id', {\r\n  method: 'DELETE'\r\n});\r\n\r\nserver.proxy('/article/:id', {\r\n  method: 'PUT'\r\n});\r\n\r\nserver.proxy('/article/:id', {\r\n  method: 'PATCH'\r\n});\r\n```\r\n\r\n### server.register(apiList);\r\n注册 api\r\n\r\n- apiList:  api 模块列表\r\n\r\n```javascript\r\nserver.register([\r\n\trequire('./article/index'),\r\n\trequire('./user/index')\r\n]);\r\n```\r\n\r\n### server.start(port, host)\r\n - port:  服务器监听的网络端口\r\n - host： 主机\r\n\r\n## 路由匹配规则：:\r\n字符串:\r\n\r\n    \"/articles\" 只会匹配到 \"/articles\"。 /articles/ 不会被匹配到。\r\n\r\n命名参数:\r\n\r\n    \"/articles/:title\" 只会匹配到像\"/articles/hello\"的路由, 但是不会匹配到 \"/articles/\".\r\n\r\n可选参数:\r\n\r\n    \"/articles/:title?\" 匹配 \"/articles/hello\" 和 \"/articles/\"。\r\n\r\n可选参数前面的参数也是可选的:\r\n\r\n    \"/:n.:f?\" 会匹配到 \"/1\" 和 \"/1.json\"\r\n\r\n星号（splat）:\r\n\r\n    \"/assets/*\" 匹配到 \"/assets/blah/blah/blah.png\" 和 \"/assets/\".\r\n\r\n    \"/assets/*.*\" 会匹配到 \"/assets/1/2/3.js\"， 并且有 splats: [\"1/2/3\", \"js\"]\r\n\r\n星号和命名参数:\r\n\r\n    \"/account/:id/assets/*\" 会匹配到 \"/account/2/assets/folder.png\"，并且有 params: {id: 2}, splats:[\"folder.png\"]\r\n\r\n\r\n正则表达式:\r\n\r\n    \"/lang/:lang([a-z]{2})\" 会匹配到 \"/lang/en\", 但是不会匹配到 \"/lang/12\" 和 \"/lang/eng\"\r\n\r\n参考： https://github.com/aaronblohowiak/routes.js\r\n\r\n## 数据生成\r\nohana 默认集成了 mockjs，你可以使用 mockjs 生成 json 数据。当然你也可以使用其他的生成工具。\r\n参考文档： http://mockjs.com/editor.html#help\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}